// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/dirac-lee/ddd_demo_parking/biz/core/parking/domain"
	"github.com/dirac-lee/ddd_demo_parking/biz/core/parking/domain/policy"
	"github.com/dirac-lee/ddd_demo_parking/biz/core/parking/infra"
	"github.com/dirac-lee/ddd_demo_parking/biz/sal/db"
	"github.com/dirac-lee/ddd_demo_parking/biz/sal/db/dao"
	"github.com/dirac-lee/ddd_demo_parking/biz/sal/id_gen"
)

// Injectors from wire.go:

func Setup() ParkingApp {
	dtoAssembler := DtoAssembler{}
	gormDB := db.NewDB()
	daoDao := dao.New(gormDB)
	query := daoDao.Q
	iParkingPoDo := daoDao.ParkingDao
	parkingBuilder := parking_infra_impl.ParkingBuilder{}
	parkingRepository := &parking_infra_impl.ParkingRepository{
		Q:              query,
		ParkingDao:     iParkingPoDo,
		ParkingBuilder: parkingBuilder,
	}
	idGen := id_gen.New()
	alarmService := parking_infra_impl.AlarmService{
		Dao:   query,
		IDGen: idGen,
	}
	alarmPolicy := parking_policy.AlarmPolicy{
		AlarmService: alarmService,
	}
	summaryListener := parking_infra_impl.SummaryListener{
		Dao:   query,
		IDGen: idGen,
	}
	parkingViewListener := parking_infra_impl.ParkingViewListener{
		Dao:   query,
		IDGen: idGen,
	}
	dailyRevenueListener := parking_infra_impl.DailyRevenueListener{
		Dao:   query,
		IDGen: idGen,
	}
	eventListenerRegistration := parking_infra_impl.EventListenerRegistration{
		AlarmPolicy:          alarmPolicy,
		SummaryListener:      summaryListener,
		ParkingViewListener:  parkingViewListener,
		DailyRevenueListener: dailyRevenueListener,
	}
	v := parking_infra_impl.RegisterListeners(eventListenerRegistration)
	syncEventBroker := parking_infra_impl.SyncEventBroker{
		EventListeners: v,
	}
	syncEventPublisher := parking_infra_impl.SyncEventPublisher{
		EventBroker: syncEventBroker,
	}
	checkInCommandHandler := parking_domain.CheckInCommandHandler{
		ParkingRepository: parkingRepository,
		EventPublisher:    syncEventPublisher,
	}
	checkOutCommandHandler := parking_domain.CheckOutCommandHandler{
		ParkingRepository: parkingRepository,
		EventPublisher:    syncEventPublisher,
	}
	calculateFeeCommandHandler := parking_domain.CalculateFeeCommandHandler{
		ParkingRepository: parkingRepository,
	}
	notifyPaidCommandHandler := parking_domain.NotifyPaidCommandHandler{
		ParkingRepository: parkingRepository,
		EventPublisher:    syncEventPublisher,
	}
	iParkingViewPoDo := daoDao.ParkingViewDao
	iSummaryPoDo := daoDao.SummaryDao
	iDailyRevenuePoDo := daoDao.DailyRevenueDao
	parkingQuery := ParkingQuery{
		ParkingViewDao:  iParkingViewPoDo,
		SummaryDao:      iSummaryPoDo,
		DailyRevenueDao: iDailyRevenuePoDo,
		DtoAssembler:    dtoAssembler,
	}
	appParkingApp := ParkingApp{
		DtoAssembler:               dtoAssembler,
		CheckInCommandHandler:      checkInCommandHandler,
		CheckOutCommandHandler:     checkOutCommandHandler,
		CalculateFeeCommandHandler: calculateFeeCommandHandler,
		NotifyPaidCommandHandler:   notifyPaidCommandHandler,
		ParkingQuery:               parkingQuery,
	}
	return appParkingApp
}
