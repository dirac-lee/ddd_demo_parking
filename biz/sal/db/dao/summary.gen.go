// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dirac-lee/ddd_demo_parking/biz/sal/db/model"
)

func newSummaryPo(db *gorm.DB, opts ...gen.DOOption) summaryPo {
	_summaryPo := summaryPo{}

	_summaryPo.summaryPoDo.UseDB(db, opts...)
	_summaryPo.summaryPoDo.UseModel(&model.SummaryPo{})

	tableName := _summaryPo.summaryPoDo.TableName()
	_summaryPo.ALL = field.NewAsterisk(tableName)
	_summaryPo.ID = field.NewInt64(tableName, "id")
	_summaryPo.TotalInParking = field.NewInt64(tableName, "total_in_parking")

	_summaryPo.fillFieldMap()

	return _summaryPo
}

type summaryPo struct {
	summaryPoDo summaryPoDo

	ALL            field.Asterisk
	ID             field.Int64
	TotalInParking field.Int64

	fieldMap map[string]field.Expr
}

func (s summaryPo) Table(newTableName string) *summaryPo {
	s.summaryPoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s summaryPo) As(alias string) *summaryPo {
	s.summaryPoDo.DO = *(s.summaryPoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *summaryPo) updateTableName(table string) *summaryPo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.TotalInParking = field.NewInt64(table, "total_in_parking")

	s.fillFieldMap()

	return s
}

func (s *summaryPo) WithContext(ctx context.Context) ISummaryPoDo {
	return s.summaryPoDo.WithContext(ctx)
}

func (s summaryPo) TableName() string { return s.summaryPoDo.TableName() }

func (s summaryPo) Alias() string { return s.summaryPoDo.Alias() }

func (s summaryPo) Columns(cols ...field.Expr) gen.Columns { return s.summaryPoDo.Columns(cols...) }

func (s *summaryPo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *summaryPo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["id"] = s.ID
	s.fieldMap["total_in_parking"] = s.TotalInParking
}

func (s summaryPo) clone(db *gorm.DB) summaryPo {
	s.summaryPoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s summaryPo) replaceDB(db *gorm.DB) summaryPo {
	s.summaryPoDo.ReplaceDB(db)
	return s
}

type summaryPoDo struct{ gen.DO }

type ISummaryPoDo interface {
	gen.SubQuery
	Debug() ISummaryPoDo
	WithContext(ctx context.Context) ISummaryPoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISummaryPoDo
	WriteDB() ISummaryPoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISummaryPoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISummaryPoDo
	Not(conds ...gen.Condition) ISummaryPoDo
	Or(conds ...gen.Condition) ISummaryPoDo
	Select(conds ...field.Expr) ISummaryPoDo
	Where(conds ...gen.Condition) ISummaryPoDo
	Order(conds ...field.Expr) ISummaryPoDo
	Distinct(cols ...field.Expr) ISummaryPoDo
	Omit(cols ...field.Expr) ISummaryPoDo
	Join(table schema.Tabler, on ...field.Expr) ISummaryPoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISummaryPoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISummaryPoDo
	Group(cols ...field.Expr) ISummaryPoDo
	Having(conds ...gen.Condition) ISummaryPoDo
	Limit(limit int) ISummaryPoDo
	Offset(offset int) ISummaryPoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISummaryPoDo
	Unscoped() ISummaryPoDo
	Create(values ...*model.SummaryPo) error
	CreateInBatches(values []*model.SummaryPo, batchSize int) error
	Save(values ...*model.SummaryPo) error
	First() (*model.SummaryPo, error)
	Take() (*model.SummaryPo, error)
	Last() (*model.SummaryPo, error)
	Find() ([]*model.SummaryPo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SummaryPo, err error)
	FindInBatches(result *[]*model.SummaryPo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SummaryPo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISummaryPoDo
	Assign(attrs ...field.AssignExpr) ISummaryPoDo
	Joins(fields ...field.RelationField) ISummaryPoDo
	Preload(fields ...field.RelationField) ISummaryPoDo
	FirstOrInit() (*model.SummaryPo, error)
	FirstOrCreate() (*model.SummaryPo, error)
	FindByPage(offset int, limit int) (result []*model.SummaryPo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISummaryPoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s summaryPoDo) Debug() ISummaryPoDo {
	return s.withDO(s.DO.Debug())
}

func (s summaryPoDo) WithContext(ctx context.Context) ISummaryPoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s summaryPoDo) ReadDB() ISummaryPoDo {
	return s.Clauses(dbresolver.Read)
}

func (s summaryPoDo) WriteDB() ISummaryPoDo {
	return s.Clauses(dbresolver.Write)
}

func (s summaryPoDo) Session(config *gorm.Session) ISummaryPoDo {
	return s.withDO(s.DO.Session(config))
}

func (s summaryPoDo) Clauses(conds ...clause.Expression) ISummaryPoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s summaryPoDo) Returning(value interface{}, columns ...string) ISummaryPoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s summaryPoDo) Not(conds ...gen.Condition) ISummaryPoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s summaryPoDo) Or(conds ...gen.Condition) ISummaryPoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s summaryPoDo) Select(conds ...field.Expr) ISummaryPoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s summaryPoDo) Where(conds ...gen.Condition) ISummaryPoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s summaryPoDo) Order(conds ...field.Expr) ISummaryPoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s summaryPoDo) Distinct(cols ...field.Expr) ISummaryPoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s summaryPoDo) Omit(cols ...field.Expr) ISummaryPoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s summaryPoDo) Join(table schema.Tabler, on ...field.Expr) ISummaryPoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s summaryPoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISummaryPoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s summaryPoDo) RightJoin(table schema.Tabler, on ...field.Expr) ISummaryPoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s summaryPoDo) Group(cols ...field.Expr) ISummaryPoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s summaryPoDo) Having(conds ...gen.Condition) ISummaryPoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s summaryPoDo) Limit(limit int) ISummaryPoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s summaryPoDo) Offset(offset int) ISummaryPoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s summaryPoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISummaryPoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s summaryPoDo) Unscoped() ISummaryPoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s summaryPoDo) Create(values ...*model.SummaryPo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s summaryPoDo) CreateInBatches(values []*model.SummaryPo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s summaryPoDo) Save(values ...*model.SummaryPo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s summaryPoDo) First() (*model.SummaryPo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SummaryPo), nil
	}
}

func (s summaryPoDo) Take() (*model.SummaryPo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SummaryPo), nil
	}
}

func (s summaryPoDo) Last() (*model.SummaryPo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SummaryPo), nil
	}
}

func (s summaryPoDo) Find() ([]*model.SummaryPo, error) {
	result, err := s.DO.Find()
	return result.([]*model.SummaryPo), err
}

func (s summaryPoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SummaryPo, err error) {
	buf := make([]*model.SummaryPo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s summaryPoDo) FindInBatches(result *[]*model.SummaryPo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s summaryPoDo) Attrs(attrs ...field.AssignExpr) ISummaryPoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s summaryPoDo) Assign(attrs ...field.AssignExpr) ISummaryPoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s summaryPoDo) Joins(fields ...field.RelationField) ISummaryPoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s summaryPoDo) Preload(fields ...field.RelationField) ISummaryPoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s summaryPoDo) FirstOrInit() (*model.SummaryPo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SummaryPo), nil
	}
}

func (s summaryPoDo) FirstOrCreate() (*model.SummaryPo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SummaryPo), nil
	}
}

func (s summaryPoDo) FindByPage(offset int, limit int) (result []*model.SummaryPo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s summaryPoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s summaryPoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s summaryPoDo) Delete(models ...*model.SummaryPo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *summaryPoDo) withDO(do gen.Dao) *summaryPoDo {
	s.DO = *do.(*gen.DO)
	return s
}
