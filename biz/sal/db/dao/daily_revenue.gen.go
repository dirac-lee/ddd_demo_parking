// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dirac-lee/ddd_demo_parking/biz/sal/db/model"
)

func newDailyRevenuePo(db *gorm.DB, opts ...gen.DOOption) dailyRevenuePo {
	_dailyRevenuePo := dailyRevenuePo{}

	_dailyRevenuePo.dailyRevenuePoDo.UseDB(db, opts...)
	_dailyRevenuePo.dailyRevenuePoDo.UseModel(&model.DailyRevenuePo{})

	tableName := _dailyRevenuePo.dailyRevenuePoDo.TableName()
	_dailyRevenuePo.ALL = field.NewAsterisk(tableName)
	_dailyRevenuePo.Date = field.NewString(tableName, "date")
	_dailyRevenuePo.Revenue = field.NewInt64(tableName, "revenue")

	_dailyRevenuePo.fillFieldMap()

	return _dailyRevenuePo
}

// dailyRevenuePo Alarm
type dailyRevenuePo struct {
	dailyRevenuePoDo dailyRevenuePoDo

	ALL     field.Asterisk
	Date    field.String
	Revenue field.Int64

	fieldMap map[string]field.Expr
}

func (d dailyRevenuePo) Table(newTableName string) *dailyRevenuePo {
	d.dailyRevenuePoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyRevenuePo) As(alias string) *dailyRevenuePo {
	d.dailyRevenuePoDo.DO = *(d.dailyRevenuePoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyRevenuePo) updateTableName(table string) *dailyRevenuePo {
	d.ALL = field.NewAsterisk(table)
	d.Date = field.NewString(table, "date")
	d.Revenue = field.NewInt64(table, "revenue")

	d.fillFieldMap()

	return d
}

func (d *dailyRevenuePo) WithContext(ctx context.Context) IDailyRevenuePoDo {
	return d.dailyRevenuePoDo.WithContext(ctx)
}

func (d dailyRevenuePo) TableName() string { return d.dailyRevenuePoDo.TableName() }

func (d dailyRevenuePo) Alias() string { return d.dailyRevenuePoDo.Alias() }

func (d dailyRevenuePo) Columns(cols ...field.Expr) gen.Columns {
	return d.dailyRevenuePoDo.Columns(cols...)
}

func (d *dailyRevenuePo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyRevenuePo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["date"] = d.Date
	d.fieldMap["revenue"] = d.Revenue
}

func (d dailyRevenuePo) clone(db *gorm.DB) dailyRevenuePo {
	d.dailyRevenuePoDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyRevenuePo) replaceDB(db *gorm.DB) dailyRevenuePo {
	d.dailyRevenuePoDo.ReplaceDB(db)
	return d
}

type dailyRevenuePoDo struct{ gen.DO }

type IDailyRevenuePoDo interface {
	gen.SubQuery
	Debug() IDailyRevenuePoDo
	WithContext(ctx context.Context) IDailyRevenuePoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailyRevenuePoDo
	WriteDB() IDailyRevenuePoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailyRevenuePoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailyRevenuePoDo
	Not(conds ...gen.Condition) IDailyRevenuePoDo
	Or(conds ...gen.Condition) IDailyRevenuePoDo
	Select(conds ...field.Expr) IDailyRevenuePoDo
	Where(conds ...gen.Condition) IDailyRevenuePoDo
	Order(conds ...field.Expr) IDailyRevenuePoDo
	Distinct(cols ...field.Expr) IDailyRevenuePoDo
	Omit(cols ...field.Expr) IDailyRevenuePoDo
	Join(table schema.Tabler, on ...field.Expr) IDailyRevenuePoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailyRevenuePoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailyRevenuePoDo
	Group(cols ...field.Expr) IDailyRevenuePoDo
	Having(conds ...gen.Condition) IDailyRevenuePoDo
	Limit(limit int) IDailyRevenuePoDo
	Offset(offset int) IDailyRevenuePoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyRevenuePoDo
	Unscoped() IDailyRevenuePoDo
	Create(values ...*model.DailyRevenuePo) error
	CreateInBatches(values []*model.DailyRevenuePo, batchSize int) error
	Save(values ...*model.DailyRevenuePo) error
	First() (*model.DailyRevenuePo, error)
	Take() (*model.DailyRevenuePo, error)
	Last() (*model.DailyRevenuePo, error)
	Find() ([]*model.DailyRevenuePo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyRevenuePo, err error)
	FindInBatches(result *[]*model.DailyRevenuePo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailyRevenuePo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailyRevenuePoDo
	Assign(attrs ...field.AssignExpr) IDailyRevenuePoDo
	Joins(fields ...field.RelationField) IDailyRevenuePoDo
	Preload(fields ...field.RelationField) IDailyRevenuePoDo
	FirstOrInit() (*model.DailyRevenuePo, error)
	FirstOrCreate() (*model.DailyRevenuePo, error)
	FindByPage(offset int, limit int) (result []*model.DailyRevenuePo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailyRevenuePoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailyRevenuePoDo) Debug() IDailyRevenuePoDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyRevenuePoDo) WithContext(ctx context.Context) IDailyRevenuePoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyRevenuePoDo) ReadDB() IDailyRevenuePoDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyRevenuePoDo) WriteDB() IDailyRevenuePoDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyRevenuePoDo) Session(config *gorm.Session) IDailyRevenuePoDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyRevenuePoDo) Clauses(conds ...clause.Expression) IDailyRevenuePoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyRevenuePoDo) Returning(value interface{}, columns ...string) IDailyRevenuePoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyRevenuePoDo) Not(conds ...gen.Condition) IDailyRevenuePoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyRevenuePoDo) Or(conds ...gen.Condition) IDailyRevenuePoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyRevenuePoDo) Select(conds ...field.Expr) IDailyRevenuePoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyRevenuePoDo) Where(conds ...gen.Condition) IDailyRevenuePoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyRevenuePoDo) Order(conds ...field.Expr) IDailyRevenuePoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyRevenuePoDo) Distinct(cols ...field.Expr) IDailyRevenuePoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyRevenuePoDo) Omit(cols ...field.Expr) IDailyRevenuePoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyRevenuePoDo) Join(table schema.Tabler, on ...field.Expr) IDailyRevenuePoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyRevenuePoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailyRevenuePoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyRevenuePoDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailyRevenuePoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyRevenuePoDo) Group(cols ...field.Expr) IDailyRevenuePoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyRevenuePoDo) Having(conds ...gen.Condition) IDailyRevenuePoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyRevenuePoDo) Limit(limit int) IDailyRevenuePoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyRevenuePoDo) Offset(offset int) IDailyRevenuePoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyRevenuePoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyRevenuePoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyRevenuePoDo) Unscoped() IDailyRevenuePoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyRevenuePoDo) Create(values ...*model.DailyRevenuePo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyRevenuePoDo) CreateInBatches(values []*model.DailyRevenuePo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyRevenuePoDo) Save(values ...*model.DailyRevenuePo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyRevenuePoDo) First() (*model.DailyRevenuePo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyRevenuePo), nil
	}
}

func (d dailyRevenuePoDo) Take() (*model.DailyRevenuePo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyRevenuePo), nil
	}
}

func (d dailyRevenuePoDo) Last() (*model.DailyRevenuePo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyRevenuePo), nil
	}
}

func (d dailyRevenuePoDo) Find() ([]*model.DailyRevenuePo, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyRevenuePo), err
}

func (d dailyRevenuePoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyRevenuePo, err error) {
	buf := make([]*model.DailyRevenuePo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyRevenuePoDo) FindInBatches(result *[]*model.DailyRevenuePo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyRevenuePoDo) Attrs(attrs ...field.AssignExpr) IDailyRevenuePoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyRevenuePoDo) Assign(attrs ...field.AssignExpr) IDailyRevenuePoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyRevenuePoDo) Joins(fields ...field.RelationField) IDailyRevenuePoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyRevenuePoDo) Preload(fields ...field.RelationField) IDailyRevenuePoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyRevenuePoDo) FirstOrInit() (*model.DailyRevenuePo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyRevenuePo), nil
	}
}

func (d dailyRevenuePoDo) FirstOrCreate() (*model.DailyRevenuePo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyRevenuePo), nil
	}
}

func (d dailyRevenuePoDo) FindByPage(offset int, limit int) (result []*model.DailyRevenuePo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyRevenuePoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyRevenuePoDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyRevenuePoDo) Delete(models ...*model.DailyRevenuePo) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyRevenuePoDo) withDO(do gen.Dao) *dailyRevenuePoDo {
	d.DO = *do.(*gen.DO)
	return d
}
