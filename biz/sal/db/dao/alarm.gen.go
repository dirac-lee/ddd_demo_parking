// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dirac-lee/ddd_demo_parking/biz/sal/db/model"
)

func newAlarmPo(db *gorm.DB, opts ...gen.DOOption) alarmPo {
	_alarmPo := alarmPo{}

	_alarmPo.alarmPoDo.UseDB(db, opts...)
	_alarmPo.alarmPoDo.UseModel(&model.AlarmPo{})

	tableName := _alarmPo.alarmPoDo.TableName()
	_alarmPo.ALL = field.NewAsterisk(tableName)
	_alarmPo.ID = field.NewInt64(tableName, "id")
	_alarmPo.Plate = field.NewString(tableName, "plate")
	_alarmPo.Message = field.NewString(tableName, "message")
	_alarmPo.Time = field.NewTime(tableName, "time")

	_alarmPo.fillFieldMap()

	return _alarmPo
}

// alarmPo Alarm
type alarmPo struct {
	alarmPoDo alarmPoDo

	ALL     field.Asterisk
	ID      field.Int64
	Plate   field.String
	Message field.String
	Time    field.Time

	fieldMap map[string]field.Expr
}

func (a alarmPo) Table(newTableName string) *alarmPo {
	a.alarmPoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alarmPo) As(alias string) *alarmPo {
	a.alarmPoDo.DO = *(a.alarmPoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alarmPo) updateTableName(table string) *alarmPo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Plate = field.NewString(table, "plate")
	a.Message = field.NewString(table, "message")
	a.Time = field.NewTime(table, "time")

	a.fillFieldMap()

	return a
}

func (a *alarmPo) WithContext(ctx context.Context) IAlarmPoDo { return a.alarmPoDo.WithContext(ctx) }

func (a alarmPo) TableName() string { return a.alarmPoDo.TableName() }

func (a alarmPo) Alias() string { return a.alarmPoDo.Alias() }

func (a alarmPo) Columns(cols ...field.Expr) gen.Columns { return a.alarmPoDo.Columns(cols...) }

func (a *alarmPo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alarmPo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["plate"] = a.Plate
	a.fieldMap["message"] = a.Message
	a.fieldMap["time"] = a.Time
}

func (a alarmPo) clone(db *gorm.DB) alarmPo {
	a.alarmPoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alarmPo) replaceDB(db *gorm.DB) alarmPo {
	a.alarmPoDo.ReplaceDB(db)
	return a
}

type alarmPoDo struct{ gen.DO }

type IAlarmPoDo interface {
	gen.SubQuery
	Debug() IAlarmPoDo
	WithContext(ctx context.Context) IAlarmPoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlarmPoDo
	WriteDB() IAlarmPoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlarmPoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlarmPoDo
	Not(conds ...gen.Condition) IAlarmPoDo
	Or(conds ...gen.Condition) IAlarmPoDo
	Select(conds ...field.Expr) IAlarmPoDo
	Where(conds ...gen.Condition) IAlarmPoDo
	Order(conds ...field.Expr) IAlarmPoDo
	Distinct(cols ...field.Expr) IAlarmPoDo
	Omit(cols ...field.Expr) IAlarmPoDo
	Join(table schema.Tabler, on ...field.Expr) IAlarmPoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmPoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlarmPoDo
	Group(cols ...field.Expr) IAlarmPoDo
	Having(conds ...gen.Condition) IAlarmPoDo
	Limit(limit int) IAlarmPoDo
	Offset(offset int) IAlarmPoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmPoDo
	Unscoped() IAlarmPoDo
	Create(values ...*model.AlarmPo) error
	CreateInBatches(values []*model.AlarmPo, batchSize int) error
	Save(values ...*model.AlarmPo) error
	First() (*model.AlarmPo, error)
	Take() (*model.AlarmPo, error)
	Last() (*model.AlarmPo, error)
	Find() ([]*model.AlarmPo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmPo, err error)
	FindInBatches(result *[]*model.AlarmPo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlarmPo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlarmPoDo
	Assign(attrs ...field.AssignExpr) IAlarmPoDo
	Joins(fields ...field.RelationField) IAlarmPoDo
	Preload(fields ...field.RelationField) IAlarmPoDo
	FirstOrInit() (*model.AlarmPo, error)
	FirstOrCreate() (*model.AlarmPo, error)
	FindByPage(offset int, limit int) (result []*model.AlarmPo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlarmPoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alarmPoDo) Debug() IAlarmPoDo {
	return a.withDO(a.DO.Debug())
}

func (a alarmPoDo) WithContext(ctx context.Context) IAlarmPoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alarmPoDo) ReadDB() IAlarmPoDo {
	return a.Clauses(dbresolver.Read)
}

func (a alarmPoDo) WriteDB() IAlarmPoDo {
	return a.Clauses(dbresolver.Write)
}

func (a alarmPoDo) Session(config *gorm.Session) IAlarmPoDo {
	return a.withDO(a.DO.Session(config))
}

func (a alarmPoDo) Clauses(conds ...clause.Expression) IAlarmPoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alarmPoDo) Returning(value interface{}, columns ...string) IAlarmPoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alarmPoDo) Not(conds ...gen.Condition) IAlarmPoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alarmPoDo) Or(conds ...gen.Condition) IAlarmPoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alarmPoDo) Select(conds ...field.Expr) IAlarmPoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alarmPoDo) Where(conds ...gen.Condition) IAlarmPoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alarmPoDo) Order(conds ...field.Expr) IAlarmPoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alarmPoDo) Distinct(cols ...field.Expr) IAlarmPoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alarmPoDo) Omit(cols ...field.Expr) IAlarmPoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alarmPoDo) Join(table schema.Tabler, on ...field.Expr) IAlarmPoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alarmPoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmPoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alarmPoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlarmPoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alarmPoDo) Group(cols ...field.Expr) IAlarmPoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alarmPoDo) Having(conds ...gen.Condition) IAlarmPoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alarmPoDo) Limit(limit int) IAlarmPoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alarmPoDo) Offset(offset int) IAlarmPoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alarmPoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmPoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alarmPoDo) Unscoped() IAlarmPoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alarmPoDo) Create(values ...*model.AlarmPo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alarmPoDo) CreateInBatches(values []*model.AlarmPo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alarmPoDo) Save(values ...*model.AlarmPo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alarmPoDo) First() (*model.AlarmPo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmPo), nil
	}
}

func (a alarmPoDo) Take() (*model.AlarmPo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmPo), nil
	}
}

func (a alarmPoDo) Last() (*model.AlarmPo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmPo), nil
	}
}

func (a alarmPoDo) Find() ([]*model.AlarmPo, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlarmPo), err
}

func (a alarmPoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmPo, err error) {
	buf := make([]*model.AlarmPo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alarmPoDo) FindInBatches(result *[]*model.AlarmPo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alarmPoDo) Attrs(attrs ...field.AssignExpr) IAlarmPoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alarmPoDo) Assign(attrs ...field.AssignExpr) IAlarmPoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alarmPoDo) Joins(fields ...field.RelationField) IAlarmPoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alarmPoDo) Preload(fields ...field.RelationField) IAlarmPoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alarmPoDo) FirstOrInit() (*model.AlarmPo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmPo), nil
	}
}

func (a alarmPoDo) FirstOrCreate() (*model.AlarmPo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmPo), nil
	}
}

func (a alarmPoDo) FindByPage(offset int, limit int) (result []*model.AlarmPo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alarmPoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alarmPoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alarmPoDo) Delete(models ...*model.AlarmPo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alarmPoDo) withDO(do gen.Dao) *alarmPoDo {
	a.DO = *do.(*gen.DO)
	return a
}
