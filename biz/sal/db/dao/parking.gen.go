// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dirac-lee/ddd_demo_parking/biz/sal/db/model"
)

func newParkingPo(db *gorm.DB, opts ...gen.DOOption) parkingPo {
	_parkingPo := parkingPo{}

	_parkingPo.parkingPoDo.UseDB(db, opts...)
	_parkingPo.parkingPoDo.UseModel(&model.ParkingPo{})

	tableName := _parkingPo.parkingPoDo.TableName()
	_parkingPo.ALL = field.NewAsterisk(tableName)
	_parkingPo.ID = field.NewString(tableName, "id")
	_parkingPo.CheckInTime = field.NewTime(tableName, "check_in_time")
	_parkingPo.LastPayTime = field.NewTime(tableName, "last_pay_time")
	_parkingPo.TotalPaid = field.NewInt64(tableName, "total_paid")

	_parkingPo.fillFieldMap()

	return _parkingPo
}

// parkingPo Parking
type parkingPo struct {
	parkingPoDo parkingPoDo

	ALL         field.Asterisk
	ID          field.String
	CheckInTime field.Time
	LastPayTime field.Time
	TotalPaid   field.Int64

	fieldMap map[string]field.Expr
}

func (p parkingPo) Table(newTableName string) *parkingPo {
	p.parkingPoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p parkingPo) As(alias string) *parkingPo {
	p.parkingPoDo.DO = *(p.parkingPoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *parkingPo) updateTableName(table string) *parkingPo {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.CheckInTime = field.NewTime(table, "check_in_time")
	p.LastPayTime = field.NewTime(table, "last_pay_time")
	p.TotalPaid = field.NewInt64(table, "total_paid")

	p.fillFieldMap()

	return p
}

func (p *parkingPo) WithContext(ctx context.Context) IParkingPoDo {
	return p.parkingPoDo.WithContext(ctx)
}

func (p parkingPo) TableName() string { return p.parkingPoDo.TableName() }

func (p parkingPo) Alias() string { return p.parkingPoDo.Alias() }

func (p parkingPo) Columns(cols ...field.Expr) gen.Columns { return p.parkingPoDo.Columns(cols...) }

func (p *parkingPo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *parkingPo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["check_in_time"] = p.CheckInTime
	p.fieldMap["last_pay_time"] = p.LastPayTime
	p.fieldMap["total_paid"] = p.TotalPaid
}

func (p parkingPo) clone(db *gorm.DB) parkingPo {
	p.parkingPoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p parkingPo) replaceDB(db *gorm.DB) parkingPo {
	p.parkingPoDo.ReplaceDB(db)
	return p
}

type parkingPoDo struct{ gen.DO }

type IParkingPoDo interface {
	gen.SubQuery
	Debug() IParkingPoDo
	WithContext(ctx context.Context) IParkingPoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IParkingPoDo
	WriteDB() IParkingPoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IParkingPoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IParkingPoDo
	Not(conds ...gen.Condition) IParkingPoDo
	Or(conds ...gen.Condition) IParkingPoDo
	Select(conds ...field.Expr) IParkingPoDo
	Where(conds ...gen.Condition) IParkingPoDo
	Order(conds ...field.Expr) IParkingPoDo
	Distinct(cols ...field.Expr) IParkingPoDo
	Omit(cols ...field.Expr) IParkingPoDo
	Join(table schema.Tabler, on ...field.Expr) IParkingPoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IParkingPoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IParkingPoDo
	Group(cols ...field.Expr) IParkingPoDo
	Having(conds ...gen.Condition) IParkingPoDo
	Limit(limit int) IParkingPoDo
	Offset(offset int) IParkingPoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IParkingPoDo
	Unscoped() IParkingPoDo
	Create(values ...*model.ParkingPo) error
	CreateInBatches(values []*model.ParkingPo, batchSize int) error
	Save(values ...*model.ParkingPo) error
	First() (*model.ParkingPo, error)
	Take() (*model.ParkingPo, error)
	Last() (*model.ParkingPo, error)
	Find() ([]*model.ParkingPo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ParkingPo, err error)
	FindInBatches(result *[]*model.ParkingPo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ParkingPo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IParkingPoDo
	Assign(attrs ...field.AssignExpr) IParkingPoDo
	Joins(fields ...field.RelationField) IParkingPoDo
	Preload(fields ...field.RelationField) IParkingPoDo
	FirstOrInit() (*model.ParkingPo, error)
	FirstOrCreate() (*model.ParkingPo, error)
	FindByPage(offset int, limit int) (result []*model.ParkingPo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IParkingPoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p parkingPoDo) Debug() IParkingPoDo {
	return p.withDO(p.DO.Debug())
}

func (p parkingPoDo) WithContext(ctx context.Context) IParkingPoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p parkingPoDo) ReadDB() IParkingPoDo {
	return p.Clauses(dbresolver.Read)
}

func (p parkingPoDo) WriteDB() IParkingPoDo {
	return p.Clauses(dbresolver.Write)
}

func (p parkingPoDo) Session(config *gorm.Session) IParkingPoDo {
	return p.withDO(p.DO.Session(config))
}

func (p parkingPoDo) Clauses(conds ...clause.Expression) IParkingPoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p parkingPoDo) Returning(value interface{}, columns ...string) IParkingPoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p parkingPoDo) Not(conds ...gen.Condition) IParkingPoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p parkingPoDo) Or(conds ...gen.Condition) IParkingPoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p parkingPoDo) Select(conds ...field.Expr) IParkingPoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p parkingPoDo) Where(conds ...gen.Condition) IParkingPoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p parkingPoDo) Order(conds ...field.Expr) IParkingPoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p parkingPoDo) Distinct(cols ...field.Expr) IParkingPoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p parkingPoDo) Omit(cols ...field.Expr) IParkingPoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p parkingPoDo) Join(table schema.Tabler, on ...field.Expr) IParkingPoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p parkingPoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IParkingPoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p parkingPoDo) RightJoin(table schema.Tabler, on ...field.Expr) IParkingPoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p parkingPoDo) Group(cols ...field.Expr) IParkingPoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p parkingPoDo) Having(conds ...gen.Condition) IParkingPoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p parkingPoDo) Limit(limit int) IParkingPoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p parkingPoDo) Offset(offset int) IParkingPoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p parkingPoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IParkingPoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p parkingPoDo) Unscoped() IParkingPoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p parkingPoDo) Create(values ...*model.ParkingPo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p parkingPoDo) CreateInBatches(values []*model.ParkingPo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p parkingPoDo) Save(values ...*model.ParkingPo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p parkingPoDo) First() (*model.ParkingPo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingPo), nil
	}
}

func (p parkingPoDo) Take() (*model.ParkingPo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingPo), nil
	}
}

func (p parkingPoDo) Last() (*model.ParkingPo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingPo), nil
	}
}

func (p parkingPoDo) Find() ([]*model.ParkingPo, error) {
	result, err := p.DO.Find()
	return result.([]*model.ParkingPo), err
}

func (p parkingPoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ParkingPo, err error) {
	buf := make([]*model.ParkingPo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p parkingPoDo) FindInBatches(result *[]*model.ParkingPo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p parkingPoDo) Attrs(attrs ...field.AssignExpr) IParkingPoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p parkingPoDo) Assign(attrs ...field.AssignExpr) IParkingPoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p parkingPoDo) Joins(fields ...field.RelationField) IParkingPoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p parkingPoDo) Preload(fields ...field.RelationField) IParkingPoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p parkingPoDo) FirstOrInit() (*model.ParkingPo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingPo), nil
	}
}

func (p parkingPoDo) FirstOrCreate() (*model.ParkingPo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingPo), nil
	}
}

func (p parkingPoDo) FindByPage(offset int, limit int) (result []*model.ParkingPo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p parkingPoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p parkingPoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p parkingPoDo) Delete(models ...*model.ParkingPo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *parkingPoDo) withDO(do gen.Dao) *parkingPoDo {
	p.DO = *do.(*gen.DO)
	return p
}
