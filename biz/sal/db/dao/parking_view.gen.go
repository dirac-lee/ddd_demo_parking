// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dirac-lee/ddd_demo_parking/biz/sal/db/model"
)

func newParkingViewPo(db *gorm.DB, opts ...gen.DOOption) parkingViewPo {
	_parkingViewPo := parkingViewPo{}

	_parkingViewPo.parkingViewPoDo.UseDB(db, opts...)
	_parkingViewPo.parkingViewPoDo.UseModel(&model.ParkingViewPo{})

	tableName := _parkingViewPo.parkingViewPoDo.TableName()
	_parkingViewPo.ALL = field.NewAsterisk(tableName)
	_parkingViewPo.ID = field.NewInt64(tableName, "id")
	_parkingViewPo.Plate = field.NewString(tableName, "plate")
	_parkingViewPo.CheckInTime = field.NewTime(tableName, "check_in_time")
	_parkingViewPo.CheckOutTime = field.NewTime(tableName, "check_out_time")
	_parkingViewPo.PayAmount = field.NewInt64(tableName, "pay_amount")

	_parkingViewPo.fillFieldMap()

	return _parkingViewPo
}

// parkingViewPo Parking
type parkingViewPo struct {
	parkingViewPoDo parkingViewPoDo

	ALL          field.Asterisk
	ID           field.Int64
	Plate        field.String
	CheckInTime  field.Time
	CheckOutTime field.Time
	PayAmount    field.Int64

	fieldMap map[string]field.Expr
}

func (p parkingViewPo) Table(newTableName string) *parkingViewPo {
	p.parkingViewPoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p parkingViewPo) As(alias string) *parkingViewPo {
	p.parkingViewPoDo.DO = *(p.parkingViewPoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *parkingViewPo) updateTableName(table string) *parkingViewPo {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Plate = field.NewString(table, "plate")
	p.CheckInTime = field.NewTime(table, "check_in_time")
	p.CheckOutTime = field.NewTime(table, "check_out_time")
	p.PayAmount = field.NewInt64(table, "pay_amount")

	p.fillFieldMap()

	return p
}

func (p *parkingViewPo) WithContext(ctx context.Context) IParkingViewPoDo {
	return p.parkingViewPoDo.WithContext(ctx)
}

func (p parkingViewPo) TableName() string { return p.parkingViewPoDo.TableName() }

func (p parkingViewPo) Alias() string { return p.parkingViewPoDo.Alias() }

func (p parkingViewPo) Columns(cols ...field.Expr) gen.Columns {
	return p.parkingViewPoDo.Columns(cols...)
}

func (p *parkingViewPo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *parkingViewPo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["plate"] = p.Plate
	p.fieldMap["check_in_time"] = p.CheckInTime
	p.fieldMap["check_out_time"] = p.CheckOutTime
	p.fieldMap["pay_amount"] = p.PayAmount
}

func (p parkingViewPo) clone(db *gorm.DB) parkingViewPo {
	p.parkingViewPoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p parkingViewPo) replaceDB(db *gorm.DB) parkingViewPo {
	p.parkingViewPoDo.ReplaceDB(db)
	return p
}

type parkingViewPoDo struct{ gen.DO }

type IParkingViewPoDo interface {
	gen.SubQuery
	Debug() IParkingViewPoDo
	WithContext(ctx context.Context) IParkingViewPoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IParkingViewPoDo
	WriteDB() IParkingViewPoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IParkingViewPoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IParkingViewPoDo
	Not(conds ...gen.Condition) IParkingViewPoDo
	Or(conds ...gen.Condition) IParkingViewPoDo
	Select(conds ...field.Expr) IParkingViewPoDo
	Where(conds ...gen.Condition) IParkingViewPoDo
	Order(conds ...field.Expr) IParkingViewPoDo
	Distinct(cols ...field.Expr) IParkingViewPoDo
	Omit(cols ...field.Expr) IParkingViewPoDo
	Join(table schema.Tabler, on ...field.Expr) IParkingViewPoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IParkingViewPoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IParkingViewPoDo
	Group(cols ...field.Expr) IParkingViewPoDo
	Having(conds ...gen.Condition) IParkingViewPoDo
	Limit(limit int) IParkingViewPoDo
	Offset(offset int) IParkingViewPoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IParkingViewPoDo
	Unscoped() IParkingViewPoDo
	Create(values ...*model.ParkingViewPo) error
	CreateInBatches(values []*model.ParkingViewPo, batchSize int) error
	Save(values ...*model.ParkingViewPo) error
	First() (*model.ParkingViewPo, error)
	Take() (*model.ParkingViewPo, error)
	Last() (*model.ParkingViewPo, error)
	Find() ([]*model.ParkingViewPo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ParkingViewPo, err error)
	FindInBatches(result *[]*model.ParkingViewPo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ParkingViewPo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IParkingViewPoDo
	Assign(attrs ...field.AssignExpr) IParkingViewPoDo
	Joins(fields ...field.RelationField) IParkingViewPoDo
	Preload(fields ...field.RelationField) IParkingViewPoDo
	FirstOrInit() (*model.ParkingViewPo, error)
	FirstOrCreate() (*model.ParkingViewPo, error)
	FindByPage(offset int, limit int) (result []*model.ParkingViewPo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IParkingViewPoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p parkingViewPoDo) Debug() IParkingViewPoDo {
	return p.withDO(p.DO.Debug())
}

func (p parkingViewPoDo) WithContext(ctx context.Context) IParkingViewPoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p parkingViewPoDo) ReadDB() IParkingViewPoDo {
	return p.Clauses(dbresolver.Read)
}

func (p parkingViewPoDo) WriteDB() IParkingViewPoDo {
	return p.Clauses(dbresolver.Write)
}

func (p parkingViewPoDo) Session(config *gorm.Session) IParkingViewPoDo {
	return p.withDO(p.DO.Session(config))
}

func (p parkingViewPoDo) Clauses(conds ...clause.Expression) IParkingViewPoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p parkingViewPoDo) Returning(value interface{}, columns ...string) IParkingViewPoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p parkingViewPoDo) Not(conds ...gen.Condition) IParkingViewPoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p parkingViewPoDo) Or(conds ...gen.Condition) IParkingViewPoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p parkingViewPoDo) Select(conds ...field.Expr) IParkingViewPoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p parkingViewPoDo) Where(conds ...gen.Condition) IParkingViewPoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p parkingViewPoDo) Order(conds ...field.Expr) IParkingViewPoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p parkingViewPoDo) Distinct(cols ...field.Expr) IParkingViewPoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p parkingViewPoDo) Omit(cols ...field.Expr) IParkingViewPoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p parkingViewPoDo) Join(table schema.Tabler, on ...field.Expr) IParkingViewPoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p parkingViewPoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IParkingViewPoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p parkingViewPoDo) RightJoin(table schema.Tabler, on ...field.Expr) IParkingViewPoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p parkingViewPoDo) Group(cols ...field.Expr) IParkingViewPoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p parkingViewPoDo) Having(conds ...gen.Condition) IParkingViewPoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p parkingViewPoDo) Limit(limit int) IParkingViewPoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p parkingViewPoDo) Offset(offset int) IParkingViewPoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p parkingViewPoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IParkingViewPoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p parkingViewPoDo) Unscoped() IParkingViewPoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p parkingViewPoDo) Create(values ...*model.ParkingViewPo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p parkingViewPoDo) CreateInBatches(values []*model.ParkingViewPo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p parkingViewPoDo) Save(values ...*model.ParkingViewPo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p parkingViewPoDo) First() (*model.ParkingViewPo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingViewPo), nil
	}
}

func (p parkingViewPoDo) Take() (*model.ParkingViewPo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingViewPo), nil
	}
}

func (p parkingViewPoDo) Last() (*model.ParkingViewPo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingViewPo), nil
	}
}

func (p parkingViewPoDo) Find() ([]*model.ParkingViewPo, error) {
	result, err := p.DO.Find()
	return result.([]*model.ParkingViewPo), err
}

func (p parkingViewPoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ParkingViewPo, err error) {
	buf := make([]*model.ParkingViewPo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p parkingViewPoDo) FindInBatches(result *[]*model.ParkingViewPo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p parkingViewPoDo) Attrs(attrs ...field.AssignExpr) IParkingViewPoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p parkingViewPoDo) Assign(attrs ...field.AssignExpr) IParkingViewPoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p parkingViewPoDo) Joins(fields ...field.RelationField) IParkingViewPoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p parkingViewPoDo) Preload(fields ...field.RelationField) IParkingViewPoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p parkingViewPoDo) FirstOrInit() (*model.ParkingViewPo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingViewPo), nil
	}
}

func (p parkingViewPoDo) FirstOrCreate() (*model.ParkingViewPo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParkingViewPo), nil
	}
}

func (p parkingViewPoDo) FindByPage(offset int, limit int) (result []*model.ParkingViewPo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p parkingViewPoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p parkingViewPoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p parkingViewPoDo) Delete(models ...*model.ParkingViewPo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *parkingViewPoDo) withDO(do gen.Dao) *parkingViewPoDo {
	p.DO = *do.(*gen.DO)
	return p
}
